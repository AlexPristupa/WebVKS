trigger:
  - deploy

pool:
  name: WebPortal

parameters:
  - name: runtime
    displayName: Compile Runitme
    type: string
    default: win81-x64
    values:
      - win81-x64
  
  - name: configuration
    displayName: Compile Configuration
    type: string
    default: Debug
    values:
      - Debug
      - Release

variables:
  FTP_USERNAME: $(ftpUsername)
  FTP_PASSWORD: $(ftpPassword)

stages:
  - stage: Build
    jobs:
    - job: Build
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
      strategy:
        parallel: 1
      steps:
        - task: Bash@3
          displayName: Get Task ID
          name: getTaskId
          inputs:
            targetType: 'inline'
            script: |
              echo "Branch name is $SYSTEM_PULLREQUEST_SOURCEBRANCH"
              PR_BRANCH=$(echo $SYSTEM_PULLREQUEST_SOURCEBRANCH | sed 's,refs/heads/,,')
              case $PR_BRANCH in
                ''|*[!0-9]*) echo "##vso[task.setvariable variable=taskId;isOutput=true]00000";;
                *) echo "##vso[task.setvariable variable=taskId;isOutput=true]$PR_BRANCH";;
              esac

        - task: Npm@1
          displayName: Install WebMMS Vue frontend dependency
          inputs:
            command: 'install'
            workingDir: front

#        - task: Npm@1
#          displayName: Test WebMMS Vue frontend
#          inputs:
#            command: 'custom'
#            workingDir: front
#            customCommand: 'run test'        
    
        - script: cd front; npm run build:otkritie 
          displayName: Build WebMMS Vue frontend

#        - task: Npm@1
#          displayName: Install WebPortal frontend dependency
#          inputs:
#            command: 'ci'
#            workingDir: sources/mentol.pro.web

        - task: DotNetCoreCLI@2
          displayName: Build WebMMS backend
          inputs:
            command: 'publish' 
            publishWebProjects: false 
            #projects: # Optional
            projects: |
              back/MentolVKS/MentolVKS.csproj
            #!'back/MentolVKS/MentolVKS - Backup.csproj'
            #custom: # Required when command == Custom
            arguments: '-c ${{ parameters.configuration }} -r ${{ parameters.runtime }} -o $(Build.ArtifactStagingDirectory)'
            #publishTestResults: true # Optional
            #testRunTitle: # Optional
            zipAfterPublish: false
            #modifyOutputPath: true
            #outputDir: '$(Build.ArtifactStagingDirectory)'
            #nobuild: false # Optional
            #includesymbols: false # Optional
            #includesource: false # Optional
            #versioningScheme: 'off' # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
            #versionEnvVar: # Required when versioningScheme == ByEnvVar
            #majorVersion: '1' # Required when versioningScheme == ByPrereleaseNumber
            #minorVersion: '0' # Required when versioningScheme == ByPrereleaseNumber
            #patchVersion: '0' # Required when versioningScheme == ByPrereleaseNumber
            #buildProperties: # Optional
            #verbosityPack: 'Detailed' # Options: -, quiet, minimal, normal, detailed, diagnostic
            workingDirectory: back/MentolVKS
            
            

#        - task: CopyFiles@2
#          displayName: Copy themes
#          inputs:
#            sourceFolder: 'sources/themes/${{ parameters.theme }}'
#            contents: '**'
#            targetFolder: '$(Build.ArtifactStagingDirectory)/mentol.pro.web/wwwroot'
#            overWrite: true

        - task: ArchiveFiles@2
          displayName: Zip mentol.pro.web
          inputs:
            rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/MentolVKS'
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(getTaskId.taskId).zip'
            includeRootFolder: false

        - task: FtpUpload@2
          displayName: FTP upload
          inputs:
            credentialsOption: 'inputs'
            serverUrl: 'ftp://192.168.80.200'
            username: $(FTP_USERNAME)
            password: $(FTP_PASSWORD)
            rootDirectory: '$(Build.ArtifactStagingDirectory)'
            filePatterns: '$(getTaskId.taskId).zip'
            remoteDirectory: '/mentol/version/Temp'

  - stage: DeployPR
    displayName: 'Deploy PR'
#    # condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'), ne(variables['System.PullRequest.PullRequestId'], 'Null'))
    jobs:
      - template: MMS-azure-pipelines-deployment.yml