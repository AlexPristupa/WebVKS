export default {
  login: {
    login: 'Login',
    password: 'Password',
    lengthLogin: 'Length should be from 3 to 25',
  },
  editBookingListParticipant: {
    vksUserName: 'Name',
    noName: 'No name',
    uri: 'URI',
    email: 'Email',
    callLegProfileGuid: 'Call settings profile',
  },
  editServer: {
    title: {
      add: 'Add server',
      edit: 'Edit server: {0}',
    },
    label: {
      name: 'Name',
      description: 'Description',
      isUseBalancer: 'Use load balancing',
      balancerAlgId: 'Balancing algorithm',
    },
  },
  editServerGroup: {
    title: {
      add: 'Add server group',
      edit: 'Edit server group: {0}',
    },
    label: {
      name: 'Name',
      description: 'Description',
      isUseBalancer: 'Use load balancing',
      balancerAlgId: 'Balancing algorithm',
      availableServers: 'Available servers',
      selectedServers: 'Selected servers',
    },
    insertion: {
      text: 'Servers',
    },
  },
  shareRecordAddUser: {
    user: 'User',
    download: 'Download',
    watch: 'Watch',
    description: 'Description',
  },
  editSpace: {
    placeholders: {
      ownerId: 'Owner',
    },
    serversGroupsId: 'Server CMS',
    name: 'Name',
    uri: 'URI',
    ownerId: 'Owner',
    callLegProfileGuid: 'Call settings profile',
    callBrandingProfileGuid: 'Branding settings profile',
    tagCdr: 'CDR tag',
    callIdGeneration: 'Generate a conference ID',
    callId: 'Conference ID',
    password: 'Conference password',
    uriAlt: 'Alternative Uri',
    guestPasswordGeneration:
      'Automatically generate a guest room access password',
    passwordGuest: 'Password for guest access to the room',
    isGuestAccessible: 'Available for guest access',
    uriVideo: 'Streaming video URL',
    isAvailableForBooking: 'Is accessed for booking',
    bookingSettings: 'Booking settings',
    spaceParticipantsSettings: 'Space participants settings',
  },
  editBooking: {
    titles: {
      settings: 'Main settings',
      cmsSpace: 'CMS space',
      participants: 'Participants',
    },
    placeholders: {
      owner: 'owner',
      dateStart: 'start date',
      timeZone: 'time zone',
      shift: 'policy',
    },
    texts: {
      daily: 'daily',
      weekly: 'weekly',
      monthly: 'monthly',
      leaveEmptyPinCode: 'Leave it empty for automatic generation',
      minimalValueForThisSpace: 'Maximal value for this space {0}',
      every: 'Every',
      everyDate: 'Every',
      lastDay: 'Last day',
      lastWeekday: 'Last',
      in: 'in',
      everyWeekday: 'Every weekday at',
      hour: 'Hour(s)',
      minutes: 'Minute(s)',
      day: 'day(s) in',
      monthDayAt: 'month day at',
      monthAt: ' month at',
      at: 'At',
    },
    name: 'Name',
    description: 'Description',
    location: 'Location',
    owner: 'Owner',
    dateStart: 'Start date',
    restart: 'Restart time',
    timeZone: 'Time zone',
    duration: 'Duration',
    isUsePin: 'Use pin-code',
    pinCode: 'Pin-code',
    periodic: 'Periodic',
    openConferenceBefore: 'Make open for incoming calls in',
    minuteToStart: 'min. to start',
    connectionType: 'Participants connection type',
    attemptsCount: 'Attempts number',
    delay: 'Delay',
    isSendNotification: 'Send notifications',
    isSyncToExchange: 'Synchronize calendars',
    dateEnd: 'Finish planning after',
    repeatCount: 'Repetitions number',
    policy: 'Policy',
  },
  placeholders: {
    name: 'Name',
    HHMMSS: 'hh:mm:ss',
    search: 'Search',
    add: 'Add',
    choose: 'Choose',
    searchEntity: 'Search for {0}',
    addEntity: 'Add {0}',
    enterEntity: 'Enter {0}',
    chooseEntity: 'Choose {0}',
    entities: {
      name: 'name',
      description: 'description',
      fileName: 'file name',
      columns: 'columns',
      values: 'values',
      valuesSeparatedBySeparator: 'values separated by separator',
      date: 'date',
      user: 'user',
      operator: 'operator',
      account: 'personal account',
      action: 'action',
      classSIM: 'class of SIM card',
      typeSIM: 'type of SIM card',
      typeMB3: 'type of МВЗ',
      statusSIM: 'general status of the SIM card',
      direction: 'direction',
      subdivision: 'subdivision',
      parameter: 'parameter',
      value: 'value',
      tarification: 'tariffication',
      byNameAndTemplate: 'by name and template',
      template: 'template',
      time: 'time',
      fullName: 'full name',
      transport: 'notify transport',
      login: 'login',
      employee: 'employee',
    },
  },
  validationError: {
    error: 'Validation error. Check that the fields are filled in correctly',
    requiredField: 'Required field',
    wrongFormat: 'Invalid format',
    limitAlreadySet: 'The limit has already been set',
    statusAlreadyExists: 'Status already exists',
    exceedingMaximumLengthMessage:
      'Exceeded maximum line length in {0} character',
    pleaseEnterEntity: 'Please enter {0}',
    pleaseChooseEntity: 'Please select {0}',
    pleaseOptions: {
      affiliation: 'affiliation is B2B/M2M',
      name: 'name',
      nameStatusSIM: 'SIM card status name',
      user: 'user',
      operator: 'operator',
      account: 'personal account',
      classSIM: 'class of SIM card',
      typeSIM: 'type of SIM card',
      typeMB3: 'type of МВЗ',
      direction: 'direction',
      tarification: 'tariffication',
      role: 'role',
      roleDescription: 'role description',
      valuesFromDirectory: 'values from the directory',
      atLeastOneValue: 'at least one value',
      template: 'template',
      wayOfNotifications: 'way of notifications',
      fullName: 'full name',
      email: 'email',
      phone: 'phone',
      correctEmail: 'correct email',
      correctPhone: 'correct phone',
    },
    alreadyExistEntity: '{0} already exists',
    alreadyExistOptions: {
      name: 'Name',
      role: 'Role',
      user: 'User',
      operatorsStatus: 'Operator status',
      SIMCardStatusName: 'SIM card status name {0}',
      affiliation: 'Affiliation',
      serviceWithName: 'Service with name {0}',
      affiliationClassNameTypeName: 'Affiliation "{className}", "{typeName}"',
    },
    notExistEntity: '{0} does not exist',
    notExistOptions: {
      user: 'User',
    },
    withValueEntity: 'with value "{0}"',
    methodForProcessingTableNotFound:
      'Method for processing table {0} not found',
    alreadyExistInSystem: 'The entered values already exist in the system',
    forbiddenToSendNotifications:
      'Employee {0} is not allowed to get notifications. Change transport settings',
    fieldMustBeFilled: 'The field must be filled',
    fieldMustBeEmpty: 'The field must be empty',
    tablePhoneNumberForm:
      'Assign all phone numbers to this constructor, or exclude them',
    uriValidation:
      'Enter the correct value. For example: user@domen, +79110000000, 9110000000, 123456.',
    dateEnd:
      'The start date of the conference cannot be greater than or equal to the end date',
    duration: 'The duration of the conference cannot be 0.',
    deleteRepeatedUsers:
      'The logins of the participants must be different. Please, remove the repetition of {0}',
  },
  infoMessage: {
    addCurrentPhoneNumber:
      'You are trying to add a numbers that already exists in the group. Information about him has been updated',
    numberUsed: 'The number belongs to another group',
  },
}
